{
  "name": "guppy",
  "tagline": "git-hooks for gulp",
  "body": "![guppy](https://raw.githubusercontent.com/therealklanni/git-guppy/master/guppy.png)\r\n\r\nguppy streamlines and extends your git-hooks by integrating them with your\r\n[gulp](http://gulpjs.com) workflow. This enables you to have **gulp tasks that\r\nrun when triggered by a git-hook**, which means you can do cool things like\r\nabort a commit if your tests are failing. Git-hooks can now be managed through\r\n[npm](https://npmjs.org), allowing them to automatically be installed and\r\nupdated. And because they integrate with gulp, it's easy to modify the workflow\r\nand even combine hooks with your other gulp tasks.\r\n\r\nguppy leverages these powerful existing systems as its backbone, allowing guppy\r\n(and therefore your git-hooks) to remain as simple and lightweight as possible\r\nthrough interfaces you're already familiar with.\r\n\r\nA git-hook that lint-checks your code and makes sure your unit tests pass before\r\ncommitting could be as simple as\r\n\r\n```js\r\ngulp.task('pre-commit', ['lint', 'unit']);\r\n```\r\n\r\n## Install\r\n\r\n```bash\r\nnpm i git-guppy --save-dev\r\n```\r\n\r\n## Usage\r\n\r\n### Git integration\r\n\r\n*Automatic!*\r\n\r\nThe actual scripts that git will run to trigger guppy's hooks will be automatically\r\ninstalled to your `.git/hooks/` directory. These are just a wrapper for invoking\r\nthe gulp tasks that guppy registers.\r\n\r\nTypically, a workflow can be added to your gulp tasks via a *guppy-hook*. A\r\nguppy-hook is like a git-hook preconfigured for specific gulp workflows.\r\n\r\nYou can install *guppy-hooks* via `npm` just like any other package. For every valid\r\ngit-hook name, there exists a \"guppy-[hookname]\" package that automatically installs\r\nthe related hook to your `.git/hooks` dir, e.g. \"guppy-pre-commit\" or \"guppy-post-update\".\r\nJust add the guppy-hook you need as a dev-dependency in your project.\r\n\r\nSearch [\"guppy-hook\" on npm](https://www.npmjs.com/search?q=guppy-hook) to find all\r\nguppy-hook packages. Or run `npm search guppy-hook` from the commandline.\r\n\r\n### gulp integration\r\n\r\n> :warning: **Stop!** If you are using a guppy-hook package, refer to the\r\ndocumentation for that package. You do not need the steps below unless you are\r\nadding custom guppy integration to your gulpfile or authoring your own guppy-hook\r\npackage.\r\n\r\nguppy exposes a few simple methods to help you superpower your git-hooks with\r\ngulp tasks.\r\n\r\nBefore you dive in, initialize guppy by passing in your gulp reference:\r\n\r\n```js\r\nvar gulp = require('gulp');\r\nvar guppy = require('git-guppy')(gulp);\r\n```\r\n\r\nThen simply define some gulp tasks in your `gulpfile.js` whose names match\r\nwhichever git-hooks you want to be triggerable by git.\r\n\r\n```js\r\ngulp.task('pre-commit', function () {\r\n  // see below\r\n});\r\n```\r\n\r\n*Note: if you are working directly with guppy rather than installing a guppy-hook\r\nyou will need to manually install the associated git-hooks using the\r\n[guppy-cli](https://github.com/therealklanni/guppy-cli) commandline tool.*\r\n\r\n#### guppy.src(*hookName*)\r\n\r\n> Supported hooks: `applypatch-msg`, `commit-msg`, `pre-applypatch`, `pre-commit`,\r\n`prepare-commit-msg`\r\n\r\nPass in the name of the desired git-hook and get back the related filenames.\r\nThis allows you to work with the source file directly, for example to modify a\r\ncommit-msg programmatically or lint changed files.\r\n\r\n*Note for pre-commit and pre-applypatch this will give you the ***working-copy***,\r\nnot the indexed (staged) changes. If you want the indexed changes, use\r\n`guppy.stream()` instead.*\r\n\r\n```js\r\n// contrived example\r\ngulp.task('pre-commit', function () {\r\n  return gulp.src(guppy.src('pre-commit'))\r\n    .pipe(gulpFilter(['*.js']))\r\n    .pipe(jshint())\r\n    .pipe(jshint.reporter(stylish))\r\n    .pipe(jshint.reporter('fail'));\r\n});\r\n```\r\n\r\n#### guppy.src(*hookName[, fn]*)\r\n\r\n> Supported hooks: all\r\n\r\nIf you pass the optional `fn` argument, it will be passed to `gulp.task()` as the\r\ntask callback, but the first argument will be the related filenames (or `null`,\r\nif none) and a second optional argument may also be supplied (when applicable)\r\nwith any additional arguments received from the git-hook as an array. gulp will\r\nprovide its callback as the last argument.\r\n\r\n```js\r\n// less contrived example\r\ngulp.task('pre-commit', guppy.src('pre-commit', function (filesBeingCommitted) {\r\n  return gulp.src(filesBeingCommitted)\r\n    .pipe(gulpFilter(['*.js']))\r\n    .pipe(jshint())\r\n    .pipe(jshint.reporter(stylish))\r\n    .pipe(jshint.reporter('fail'));\r\n}));\r\n\r\n// another contrived example\r\ngulp.task('pre-push', guppy.src('pre-push', function (files, extra, cb) {\r\n  var branch = execSync('git rev-parse --abbrev-ref HEAD');\r\n\r\n  if (branch === 'master') {\r\n    cb('Don\\'t push master!')\r\n  } else {\r\n    cb();\r\n  }\r\n}));\r\n```\r\n\r\n#### guppy.stream(*hookName[, options]*)\r\n\r\n> Supported hooks: `applypatch-msg`, `commit-msg`, `pre-applypatch`, `pre-commit`,\r\n`prepare-commit-msg`\r\n\r\nPass in the name of the git-hook to produce a stream of the related files.\r\nYou can pass options as a second argument, please refer to the [docs for gulp.src](https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpsrcglobs-options)\r\nfor more information on available options.\r\n\r\n*Note that depending on the git-hook, you may be acting on files that differ from\r\nyour working copy, such as those staged for commit (as with 'pre-commit' for\r\nexample), rather than the working copy. If you need to act on the working-copy\r\nfiles, use `guppy.src()` instead.*\r\n\r\n```js\r\ngulp.task('pre-commit', function () {\r\n  return guppy.stream('pre-commit')\r\n    .pipe(gulpFilter(['*.js']))\r\n    .pipe(jshint())\r\n    .pipe(jshint.reporter(stylish))\r\n    .pipe(jshint.reporter('fail'));\r\n});\r\n```\r\n\r\n#### Additional notes\r\n\r\nFor many git-hooks there are no files associated, so for those it makes sense\r\nto only add other gulp tasks as dependencies to invoke a workflow, however some\r\nwill still receive some arguments (passed in by `guppy.src()` when used as a\r\ncallback) for more advanced use cases.\r\n\r\n```js\r\ngulp.task('post-checkout', ['lint']);\r\n```\r\n\r\n## Writing guppy-hooks\r\n\r\n*stay tuned*\r\n\r\nFor details on what arguments each git-hook receives and what result a non-zero\r\nexit status would have, check the [git-scm docs](https://git-scm.com/docs/githooks).\r\n\r\n## Author\r\n\r\n**Kevin Lanni**\r\n\r\n+ [github/therealklanni](https://github.com/therealklanni)\r\n+ [twitter/therealklanni](http://twitter.com/therealklanni)\r\n\r\n## License\r\n\r\nMIT Â© Kevin Lanni\r\n![](https://ga-beacon.appspot.com/UA-62782014-1/git-guppy/1.0?pixel)\r\n",
  "google": "UA-62782014-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}